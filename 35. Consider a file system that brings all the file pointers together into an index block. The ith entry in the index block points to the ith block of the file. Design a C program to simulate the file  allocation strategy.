#include <stdio.h>
#include <stdlib.h>

#define MAX_BLOCKS 100

struct File {
    int indexBlock[MAX_BLOCKS];
    char data[MAX_BLOCKS][50];
};

void writeBlock(FILE *file, void *block, int size) {
    fwrite(block, size, 1, file);
}

void readBlock(FILE *file, void *block, int size) {
    fread(block, size, 1, file);
}

void writeFile(FILE *file, struct File *fileData, int fileSize) {
    writeBlock(file, fileData, fileSize);
}

void readFile(FILE *file, struct File *fileData, int fileSize) {
    readBlock(file, fileData, fileSize);
}

int main() {
    FILE *file;
    struct File myFile;
    int fileSize = sizeof(struct File);

    // Initialize the file index block
    for (int i = 0; i < MAX_BLOCKS; ++i) {
        myFile.indexBlock[i] = i + 1;
        sprintf(myFile.data[i], "Data for Block %d", i + 1);
    }

    // Open the file for writing in binary mode
    file = fopen("file_allocation.bin", "wb");

    if (file == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    // Write the file data to the file
    writeFile(file, &myFile, fileSize);

    fclose(file);

    // Open the file for reading in binary mode
    file = fopen("file_allocation.bin", "rb");

    if (file == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    // Read and print the file data
    readFile(file, &myFile, fileSize);

    for (int i = 0; i < MAX_BLOCKS; ++i) {
        printf("Index: %d, Data: %s\n", myFile.indexBlock[i], myFile.data[i]);
    }

    fclose(file);

    return 0;
}

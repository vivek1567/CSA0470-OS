#include <stdio.h>
#include <stdlib.h>

#define MAX_REQUESTS 100

void sortRequests(int requests[], int requestCount) {
    for (int i = 0; i < requestCount - 1; ++i) {
        for (int j = 0; j < requestCount - i - 1; ++j) {
            if (requests[j] > requests[j + 1]) {
                int temp = requests[j];
                requests[j] = requests[j + 1];
                requests[j + 1] = temp;
            }
        }
    }
}

void cscan(int requests[], int requestCount, int initialPosition) {
    int totalDistance = 0;
    int currentPosition = initialPosition;
    int direction = 1;  // 1 for right, -1 for left

    sortRequests(requests, requestCount);

    printf("Sequence of disk access:");

    int startIndex = 0;
    for (int i = 0; i < requestCount; ++i) {
        if (requests[i] >= initialPosition) {
            startIndex = i;
            break;
        }
    }

    for (int i = startIndex; i < requestCount; ++i) {
        printf(" %d", requests[i]);

        totalDistance += abs(currentPosition - requests[i]);
        currentPosition = requests[i];
    }

    totalDistance += abs(currentPosition - (direction == 1 ? 199 : 0));
    currentPosition = (direction == 1 ? 199 : 0);

    for (int i = 0; i < startIndex; ++i) {
        printf(" %d", requests[i]);

        totalDistance += abs(currentPosition - requests[i]);
        currentPosition = requests[i];
    }

    printf("\nTotal head movement: %d\n", totalDistance);
}

int main() {
    int requests[MAX_REQUESTS];
    int requestCount;

    printf("Enter the number of disk access requests: ");
    scanf("%d", &requestCount);

    if (requestCount > MAX_REQUESTS || requestCount <= 0) {
        printf("Invalid number of requests.\n");
        return 1;
    }

    printf("Enter the disk access requests:\n");
    for (int i = 0; i < requestCount; ++i) {
        printf("Request %d: ", i + 1);
        scanf("%d", &requests[i]);
    }

    int initialPosition;
    printf("Enter the initial head position: ");
    scanf("%d", &initialPosition);

    cscan(requests, requestCount, initialPosition);

    return 0;
}
